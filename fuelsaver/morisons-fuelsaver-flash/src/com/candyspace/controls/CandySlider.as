// // // ////////////////////////////////////////////////////////////////////////////// CANDYSPACE// Copyright 2012 CANDYSPACE// All Rights Reserved.//// NOTICE: You may not use, distribute or modify this document without the// written permission of its copyright owner//// // // //////////////////////////////////////////////////////////////////////////package com.candyspace.controls{	import flash.text.TextField;	import flash.display.MovieClip;	import com.candyspace.controls.event.CandyControlEvent;	import flash.events.Event;	import flash.display.Stage;	import flash.geom.Point;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.display.Sprite;	/**	 * @author Carlos D. Rodriguez	 */	// --------------------------------------	// IMPORTS	// --------------------------------------	// Flash	// PureMVC	// Structure	// Custom	// --------------------------------------	// EVENTS	// --------------------------------------	// --------------------------------------	// CLASS	// --------------------------------------	/**	 * Class Comment	 */	public class CandySlider extends Sprite	{		// --------------------------------------		// Properties		// --------------------------------------		protected var _track:Sprite;				protected var _thumb:Sprite;				protected var _tooltip:Sprite;				protected var _barMask:Sprite;				protected var _dragBoundRect:Rectangle;				protected var _maxLength:Number;				// thumb's top left corner x value. However, the actual asset has its registration point at the centre		protected var _currentPosition:Number;		protected var _initialPosition:Number;						protected var _propertyName:String;				protected var _maxValue:Number;				protected var _minValue:Number;				protected var _hasTooltip:Boolean;				protected var _stepIncrement:Number = 5;		private var _numberOfSteps:Number;		private var _stepPixels:Number;		private var _currentStep:Number;		// --------------------------------------		// Constructor		// --------------------------------------		public function CandySlider()		{			initVars();			initEventListeners();		}				// --------------------------------------		// Methods - Init		// --------------------------------------		private function initVars():void		{			_track = getChildByName("track") as Sprite;						_thumb = getChildByName("thumb") as Sprite;						_tooltip = getChildByName("_tooltip") as Sprite;						_barMask = getChildByName("barMask") as Sprite;												initDragBoundRect();			_maxLength = _track.width - _thumb.width;						_initialPosition = _thumb.x;						// by default the tooltip won't show			_hasTooltip = false;									if (_tooltip)			{				updateTooltip();				_tooltip.alpha = 0;			}						if (_barMask)			{				updateBar();			}						updateExternalTextfield();						// sets default values			setValueRange(100);		}				private function initEventListeners():void		{			_thumb.addEventListener(MouseEvent.MOUSE_DOWN, startDragging);			_track.addEventListener(MouseEvent.CLICK, snapTo);		}		// --------------------------------------		// Methods - PUBLIC		// --------------------------------------		protected var _externalTextfield:TextField;		protected var _externalTextPrefix:String;				public function addTextfieldRef(tf:TextField, prefix:String = ""):void		{			_externalTextfield = tf;			_externalTextPrefix = prefix;		}				public function setValueRange(max:Number, min:Number = 0):void		{			_maxValue = max;			_numberOfSteps = _maxValue / _stepIncrement; 			 _stepPixels    = _maxLength / _numberOfSteps;					_minValue = min;		}				public function setPropertyName(name:String):void		{			_propertyName = name;		}				public function enableTooltip():void		{			_hasTooltip = true;		}				public function resetValue():void		{			_thumb.x = _initialPosition;						if(_externalTextfield)			{				_externalTextfield.text = _externalTextPrefix + "0";			}						if (_barMask)			{				updateBar();			}					}				// --------------------------------------		// Methods - PROTECTED		// --------------------------------------				protected function showTooltip():void		{			if (_hasTooltip)			{				_tooltip.alpha = 1;			}		}				protected function hideTooltip():void		{			if (_hasTooltip)			{				_tooltip.alpha = 0;			}		}				// --------------------------------------		// Methods - PRIVATE		// --------------------------------------				private function initDragBoundRect():void		{			// rectangle sits in the middle with half a thumb width as margin in each side			var rectWidth:Number = _track.width - _thumb.width;			_dragBoundRect = new Rectangle(((_thumb.width) / 2), _thumb.height / 2, rectWidth, 0);			trace("rectangle ", this, " ==== " , _dragBoundRect);		}		/*		 *   position    = X;  currentStep = ROUND(position / stepPixels);  saving      = currentStep * stepIncrements;		 */				private function setCurrentPosition(value:Number = Number.MAX_VALUE):void		{			if(value != Number.MAX_VALUE)			{				_thumb.x = value;			}						var currentX:Number = _thumb.x;						if(currentX < _thumb.width / 2)  currentX = _thumb.width / 2;						// position of the top left corner			_currentPosition = currentX - _thumb.width / 2;						_currentStep = Math.round(_currentPosition / _stepPixels);						trace("_currentPosition", _currentPosition, "thumb.x", _thumb.x, "thumb.width / 2",_thumb.width / 2);						if(_hasTooltip)			{				updateTooltip();							}						if (_barMask)			{				updateBar();			}						updateExternalTextfield();		}				private function getCurrentValue():int		{			var maxRangeValue:Number = _maxValue - _minValue;						var valueOffset:Number = _minValue;						var offsetCurrentValue:int = Math.round(maxRangeValue * _currentPosition / _maxLength);									//trace("maxRangeValue", maxRangeValue, "_currentPosition", _currentPosition,"_maxLength", _maxLength);			//trace("maxRangeValue", maxRangeValue, "valueOffset", valueOffset,"offsetCurrentValue", offsetCurrentValue,"offsetCurrentValue + valueOffset", offsetCurrentValue + valueOffset);						//trace("getCurrentValue :: ", maxRangeValue, valueOffset, offsetCurrentValue);			trace("slider:", roundValue(offsetCurrentValue + valueOffset));						return roundValue(offsetCurrentValue + valueOffset);		}				private function roundValue(value:Number):int		{			trace("rounding value .... ", Math.floor(value / _stepIncrement));			return Math.floor(value / _stepIncrement) * _stepIncrement;					}				private function getCurrentStep():Number		{			return _currentStep * _stepIncrement;		}						private function updateExternalTextfield():void		{			if(_externalTextfield)			{				_externalTextfield.text = _externalTextPrefix +  String(getCurrentValue());								trace("textfield",_externalTextfield.text, String(getCurrentValue()))			}		}				private function updateTooltip():void		{			_tooltip.x = _thumb.x;			//tooltip.label.text = getCurrentValue();		}				private function updateBar():void		{			_barMask.width = _thumb.x + _thumb.width / 2;		}				private function dispatchCompleteEvent():void		{			trace("DISPATCHING THIS:", getCurrentValue());			dispatchEvent(new CandyControlEvent(CandyControlEvent.COMPLETE, String(getCurrentValue()), _propertyName));		}				// --------------------------------------		// Event handlers		// --------------------------------------		private function snapTo(event:MouseEvent):void		{			var rectRightX:Number = _dragBoundRect.width + _dragBoundRect.x;			trace(mouseX, _dragBoundRect.x, rectRightX);			if (mouseX < _dragBoundRect.x )			{				setCurrentPosition(_dragBoundRect.x);			}			else if (mouseX > rectRightX)			{				setCurrentPosition(rectRightX);			}			else			{				setCurrentPosition(mouseX);			}						dispatchCompleteEvent();		}		private function stopDragging(event:MouseEvent):void		{			_thumb.stopDrag();						_thumb.addEventListener(MouseEvent.MOUSE_DOWN, startDragging);						_thumb.removeEventListener(MouseEvent.MOUSE_UP, stopDragging);			stage.removeEventListener(MouseEvent.MOUSE_UP, stopDragging);			_thumb.removeEventListener(MouseEvent.MOUSE_MOVE, onThumbMove);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, onThumbMove);						dispatchCompleteEvent();						hideTooltip();		}		private function startDragging(event:MouseEvent):void		{			_thumb.removeEventListener(MouseEvent.MOUSE_DOWN, startDragging);						_thumb.addEventListener(MouseEvent.MOUSE_UP, stopDragging);			stage.addEventListener(MouseEvent.MOUSE_UP, stopDragging);						_thumb.addEventListener(MouseEvent.MOUSE_MOVE, onThumbMove);			stage.addEventListener(MouseEvent.MOUSE_MOVE, onThumbMove);						_thumb.startDrag(false, _dragBoundRect);						showTooltip();		}		private function onThumbMove(e:MouseEvent):void		{			setCurrentPosition();						dispatchEvent(new CandyControlEvent(CandyControlEvent.UPDATE, String(getCurrentValue()), _propertyName));		}	}}